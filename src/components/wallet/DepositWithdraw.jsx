import React, { useState } from 'react';
import { createDepositRequest } from '../api/auth';
import { toast } from 'react-toastify';

const DepositWithdraw = ({ onBalanceUpdate, currentBalance }) => {
  const [activeTab, setActiveTab] = useState('deposit');
  const [amount, setAmount] = useState('');
  const [loading, setLoading] = useState(false);
  const [paymentUrl, setPaymentUrl] = useState('');
  const [depositId, setDepositId] = useState('');
  
  // Withdraw specific states
  const [bankAccount, setBankAccount] = useState('');
  const [bankName, setBankName] = useState('');
  const [accountHolder, setAccountHolder] = useState('');

  const quickAmounts = [50000, 100000, 200000, 500000, 1000000, 2000000];
  const withdrawAmounts = [50000, 100000, 200000, 500000, 1000000];

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  };

  const handleAmountChange = (value) => {
    setAmount(value.toString());
  };

  const handleDeposit = async () => {
    if (!amount || parseInt(amount) <= 0) {
      toast.error('Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá');
      return;
    }

    if (parseInt(amount) < 10000) {
      toast.error('S·ªë ti·ªÅn n·∫°p t·ªëi thi·ªÉu l√† 10,000 VND');
      return;
    }

    setLoading(true);
    
    try {
      const response = await createDepositRequest(parseInt(amount));
      
      if (response && response.payment && response.payment.orderUrl) {
        // L∆∞u th√¥ng tin ƒë·ªÉ tracking
        setDepositId(response.deposit.id);
        setPaymentUrl(response.payment.orderUrl);
        
        // Redirect ƒë·∫øn trang thanh to√°n PayOS
        window.location.href = response.payment.orderUrl;
      } else {
        throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c link thanh to√°n');
      }
    } catch (error) {
      console.error('Deposit failed:', error);
      toast.error(`L·ªói t·∫°o y√™u c·∫ßu n·∫°p ti·ªÅn: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const handleWithdraw = async () => {
    if (!amount || parseInt(amount) <= 0) {
      toast.error('Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá');
      return;
    }

    if (parseInt(amount) < 50000) {
      toast.error('S·ªë ti·ªÅn r√∫t t·ªëi thi·ªÉu l√† 50,000 VND');
      return;
    }

    if (parseInt(amount) > currentBalance) {
      toast.error('S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch');
      return;
    }

    if (!bankAccount || !bankName || !accountHolder) {
      toast.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng');
      return;
    }

    setLoading(true);
    
    try {
      // TODO: Implement withdraw API call
      console.log('Withdraw request:', {
        amount: parseInt(amount),
        bankAccount,
        bankName,
        accountHolder
      });
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      toast.success('Y√™u c·∫ßu r√∫t ti·ªÅn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng! Ch√∫ng t√¥i s·∫Ω x·ª≠ l√Ω trong v√≤ng 24 gi·ªù.');
      
      // Reset form
      setAmount('');
      setBankAccount('');
      setBankName('');
      setAccountHolder('');
      
      // Trigger balance update
      if (onBalanceUpdate) {
        onBalanceUpdate();
      }
    } catch (error) {
      console.error('Withdraw failed:', error);
      toast.error(`L·ªói t·∫°o y√™u c·∫ßu r√∫t ti·ªÅn: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };



  return (
    <div className="p-8 space-y-8">
      {/* Header */}
      <div>
        <h2 className="text-2xl font-bold text-gray-800 mb-2">üí∞ N·∫°p/R√∫t ti·ªÅn</h2>
        <p className="text-gray-600">Qu·∫£n l√Ω s·ªë d∆∞ v√≠ ƒëi·ªán t·ª≠ c·ªßa b·∫°n</p>
      </div>

      {/* Tab Navigation */}
      <div className="flex space-x-1 bg-gray-100 rounded-xl p-1">
        <button
          onClick={() => {
            setActiveTab('deposit');
            setAmount('');
          }}
          className={`flex-1 py-3 px-6 rounded-lg font-medium transition-all duration-200 outline-none ${
            activeTab === 'deposit'
              ? 'bg-gray-600 text-white shadow-sm'
              : 'text-gray-600 hover:text-gray-800'
          }`}
        >
          ‚¨áÔ∏è N·∫°p ti·ªÅn
        </button>
        <button
          onClick={() => {
            setActiveTab('withdraw');
            setAmount('');
          }}
          className={`flex-1 py-3 px-6 rounded-lg font-medium transition-all duration-200 outline-none ${
            activeTab === 'withdraw'
              ? 'bg-gray-600 text-white shadow-sm'
              : 'text-gray-600 hover:text-gray-800'
          }`}
        >
          ‚¨ÜÔ∏è R√∫t ti·ªÅn
        </button>
      </div>

      <div className="bg-gray-50 rounded-2xl p-8 border border-gray-200">
        {/* Current Balance Display */}
        <div className="mb-8 p-6 bg-gradient-to-r from-gray-600 to-gray-700 rounded-xl text-white">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-lg font-medium opacity-90 mb-1">üí≥ S·ªë d∆∞ hi·ªán t·∫°i</h3>
              <div className="text-2xl font-bold">{formatCurrency(currentBalance)}</div>
            </div>
            <div className="text-right">
              <div className="text-sm opacity-75">
                {activeTab === 'deposit' ? 'Sau khi n·∫°p' : 'Sau khi r√∫t'}
              </div>
              <div className="text-xl font-semibold">
                {amount ? (
                  activeTab === 'deposit' 
                    ? formatCurrency(currentBalance + parseInt(amount))
                    : formatCurrency(Math.max(0, currentBalance - parseInt(amount)))
                ) : formatCurrency(currentBalance)}
              </div>
            </div>
          </div>
        </div>

        {/* Deposit Tab Content */}
        {activeTab === 'deposit' && (
          <>
            {/* Amount Selection */}
            <div className="mb-8">
              <label className="block text-sm font-medium text-gray-700 mb-4">
                Ch·ªçn s·ªë ti·ªÅn n·∫°p
              </label>
              
              {/* Quick Amount Buttons */}
              <div className="grid grid-cols-2 md:grid-cols-3 gap-3 mb-6">
                {quickAmounts.map((quickAmount) => (
                  <button
                    key={quickAmount}
                    onClick={() => handleAmountChange(quickAmount)}
                    className={`p-4 rounded-xl border-2 font-medium transition-all duration-200 hover:shadow-sm outline-none ${
                      amount == quickAmount
                        ? 'bg-gray-600 text-white border-gray-600'
                        : 'bg-white border-gray-200 text-gray-700 hover:border-gray-300 hover:bg-gray-50'
                    }`}
                  >
                    {formatCurrency(quickAmount)}
                  </button>
                ))}
              </div>

              {/* Custom Amount Input */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ho·∫∑c nh·∫≠p s·ªë ti·ªÅn kh√°c
                </label>
                <input
                  type="number"
                  value={amount}
                  onChange={(e) => setAmount(e.target.value)}
                  placeholder="Nh·∫≠p s·ªë ti·ªÅn (t·ªëi thi·ªÉu 10,000 VND)"
                  min="10000"
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-gray-500 focus:border-gray-500 text-gray-800 text-lg transition-all outline-none"
                />
                {amount && (
                  <p className="mt-2 text-sm text-gray-600">
                    S·ªë ti·ªÅn n·∫°p: <span className="font-medium text-gray-800">{formatCurrency(parseInt(amount) || 0)}</span>
                  </p>
                )}
              </div>
            </div>

            {/* Payment Method Info */}
            <div className="mb-8 p-6 bg-blue-50 rounded-xl border border-blue-200">
              <div className="flex items-start gap-3">
                <div className="text-2xl">üí≥</div>
                <div>
                  <h4 className="font-medium text-blue-800 mb-2">Ph∆∞∆°ng th·ª©c thanh to√°n</h4>
                  <div className="text-blue-700 text-sm space-y-1">
                    <p>‚Ä¢ PayOS - C·ªïng thanh to√°n an to√†n</p>
                    <p>‚Ä¢ H·ªó tr·ª£ QR Code, th·∫ª ATM, Internet Banking</p>
                    <p>‚Ä¢ Giao d·ªãch ƒë∆∞·ª£c m√£ h√≥a v√† b·∫£o m·∫≠t cao</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Submit Button */}
            <button
              onClick={handleDeposit}
              disabled={!amount || parseInt(amount) < 10000 || loading}
              className={`w-full py-4 rounded-xl font-semibold text-lg transition-all duration-200 outline-none ${
                !amount || parseInt(amount) < 10000 || loading
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : 'bg-gray-600 text-white hover:bg-gray-700 hover:shadow-lg'
              }`}
            >
              {loading ? (
                <span className="flex items-center justify-center gap-3">
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                  ƒêang t·∫°o giao d·ªãch...
                </span>
              ) : (
                'N·∫°p ti·ªÅn ngay'
              )}
            </button>

            {/* Transaction Info */}
            <div className="mt-8 p-6 bg-amber-50 rounded-xl border border-amber-200">
              <div className="text-amber-800">
                <div className="font-medium mb-3 flex items-center gap-2">
                  <span className="text-lg">‚ö†Ô∏è</span>
                  Th√¥ng tin quan tr·ªçng
                </div>
                <ul className="space-y-2 text-sm">
                  <li className="flex items-start gap-2">
                    <span>‚Ä¢</span>
                    <span>S·ªë ti·ªÅn n·∫°p t·ªëi thi·ªÉu: 10,000 VND</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <span>‚Ä¢</span>
                    <span>Giao d·ªãch s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ngay sau khi thanh to√°n th√†nh c√¥ng</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <span>‚Ä¢</span>
                    <span>B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn c·ªïng thanh to√°n PayOS ƒë·ªÉ ho√†n t·∫•t giao d·ªãch</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <span>‚Ä¢</span>
                    <span>Kh√¥ng tho√°t tr√¨nh duy·ªát trong qu√° tr√¨nh thanh to√°n</span>
                  </li>
                </ul>
              </div>
            </div>
          </>
        )}

        {/* Withdraw Tab Content */}
        {activeTab === 'withdraw' && (
          <>
            {/* Amount Selection */}
            <div className="mb-8">
              <label className="block text-sm font-medium text-gray-700 mb-4">
                Ch·ªçn s·ªë ti·ªÅn r√∫t
              </label>
              
              {/* Quick Amount Buttons */}
              <div className="grid grid-cols-2 md:grid-cols-3 gap-3 mb-6">
                {withdrawAmounts.map((quickAmount) => (
                  <button
                    key={quickAmount}
                    onClick={() => handleAmountChange(quickAmount)}
                    disabled={quickAmount > currentBalance}
                    className={`p-4 rounded-xl border-2 font-medium transition-all duration-200 hover:shadow-sm outline-none ${
                      quickAmount > currentBalance
                        ? 'bg-gray-100 text-gray-400 border-gray-200 cursor-not-allowed'
                        : amount == quickAmount
                        ? 'bg-red-600 text-white border-red-600'
                        : 'bg-white border-gray-200 text-gray-700 hover:border-red-300 hover:bg-red-50'
                    }`}
                  >
                    {formatCurrency(quickAmount)}
                  </button>
                ))}
              </div>

              {/* Custom Amount Input */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ho·∫∑c nh·∫≠p s·ªë ti·ªÅn kh√°c
                </label>
                <input
                  type="number"
                  value={amount}
                  onChange={(e) => setAmount(e.target.value)}
                  placeholder="Nh·∫≠p s·ªë ti·ªÅn (t·ªëi thi·ªÉu 50,000 VND)"
                  min="50000"
                  max={currentBalance}
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-red-500 focus:border-red-500 text-gray-800 text-lg transition-all outline-none"
                />
                {amount && (
                  <p className="mt-2 text-sm text-gray-600">
                    S·ªë ti·ªÅn r√∫t: <span className="font-medium text-red-600">{formatCurrency(parseInt(amount) || 0)}</span>
                  </p>
                )}
              </div>
            </div>

            {/* Bank Account Info */}
            <div className="mb-8 space-y-6">
              <h4 className="font-medium text-gray-700">Th√¥ng tin t√†i kho·∫£n nh·∫≠n ti·ªÅn</h4>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  T√™n ch·ªß t√†i kho·∫£n
                </label>
                <input
                  type="text"
                  value={accountHolder}
                  onChange={(e) => setAccountHolder(e.target.value)}
                  placeholder="Nh·∫≠p t√™n ch·ªß t√†i kho·∫£n"
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-red-500 focus:border-red-500 text-gray-800 transition-all outline-none"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  T√™n ng√¢n h√†ng
                </label>
                <select
                  value={bankName}
                  onChange={(e) => setBankName(e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-red-500 focus:border-red-500 text-gray-800 transition-all outline-none"
                >
                  <option value="">Ch·ªçn ng√¢n h√†ng</option>
                  <option value="Vietcombank">Ng√¢n h√†ng TMCP Ngo·∫°i th∆∞∆°ng Vi·ªát Nam (Vietcombank)</option>
                  <option value="VietinBank">Ng√¢n h√†ng TMCP C√¥ng th∆∞∆°ng Vi·ªát Nam (VietinBank)</option>
                  <option value="BIDV">Ng√¢n h√†ng TMCP ƒê·∫ßu t∆∞ v√† Ph√°t tri·ªÉn Vi·ªát Nam (BIDV)</option>
                  <option value="Agribank">Ng√¢n h√†ng N√¥ng nghi·ªáp v√† Ph√°t tri·ªÉn N√¥ng th√¥n Vi·ªát Nam (Agribank)</option>
                  <option value="Techcombank">Ng√¢n h√†ng TMCP K·ªπ th∆∞∆°ng Vi·ªát Nam (Techcombank)</option>
                  <option value="MBBank">Ng√¢n h√†ng TMCP Qu√¢n ƒë·ªôi (MBBank)</option>
                  <option value="ACB">Ng√¢n h√†ng TMCP √Å Ch√¢u (ACB)</option>
                  <option value="TPBank">Ng√¢n h√†ng TMCP Ti√™n Phong (TPBank)</option>
                  <option value="Sacombank">Ng√¢n h√†ng TMCP S√†i G√≤n Th∆∞∆°ng t√≠n (Sacombank)</option>
                  <option value="VPBank">Ng√¢n h√†ng TMCP Vi·ªát Nam Th·ªãnh v∆∞·ª£ng (VPBank)</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  S·ªë t√†i kho·∫£n
                </label>
                <input
                  type="text"
                  value={bankAccount}
                  onChange={(e) => setBankAccount(e.target.value)}
                  placeholder="Nh·∫≠p s·ªë t√†i kho·∫£n ng√¢n h√†ng"
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-red-500 focus:border-red-500 text-gray-800 transition-all outline-none"
                />
              </div>
            </div>

            {/* Submit Button */}
            <button
              onClick={handleWithdraw}
              disabled={!amount || parseInt(amount) < 50000 || parseInt(amount) > currentBalance || !bankAccount || !bankName || !accountHolder || loading}
              className={`w-full py-4 rounded-xl font-semibold text-lg transition-all duration-200 outline-none ${
                !amount || parseInt(amount) < 50000 || parseInt(amount) > currentBalance || !bankAccount || !bankName || !accountHolder || loading
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : 'bg-red-600 text-white hover:bg-red-700 hover:shadow-lg'
              }`}
            >
              {loading ? (
                <span className="flex items-center justify-center gap-3">
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                  ƒêang x·ª≠ l√Ω y√™u c·∫ßu...
                </span>
              ) : (
                'G·ª≠i y√™u c·∫ßu r√∫t ti·ªÅn'
              )}
            </button>

            {/* Transaction Info */}
            <div className="mt-8 p-6 bg-red-50 rounded-xl border border-red-200">
              <div className="text-red-800">
                <div className="font-medium mb-3 flex items-center gap-2">
                  <span className="text-lg">‚ö†Ô∏è</span>
                  L∆∞u √Ω quan tr·ªçng
                </div>
                <ul className="space-y-2 text-sm">
                  <li className="flex items-start gap-2">
                    <span>‚Ä¢</span>
                    <span>S·ªë ti·ªÅn r√∫t t·ªëi thi·ªÉu: 50,000 VND</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <span>‚Ä¢</span>
                    <span>Th·ªùi gian x·ª≠ l√Ω: 1-3 ng√†y l√†m vi·ªác</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <span>‚Ä¢</span>
                    <span>Vui l√≤ng ki·ªÉm tra k·ªπ th√¥ng tin t√†i kho·∫£n tr∆∞·ªõc khi g·ª≠i</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <span>‚Ä¢</span>
                    <span>Kh√¥ng th·ªÉ h·ªßy sau khi ƒë√£ g·ª≠i y√™u c·∫ßu</span>
                  </li>
                </ul>
              </div>
            </div>
          </>
                 )}
      </div>
    </div>
  );
};

export default DepositWithdraw; 