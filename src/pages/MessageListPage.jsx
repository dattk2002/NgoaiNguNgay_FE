import React, { useState, useEffect, useRef } from "react";
import { useParams } from "react-router-dom";
import {
  FaSearch,
  FaCalendarAlt,
  FaLightbulb,
  FaPaperclip,
  FaArrowUp,
} from "react-icons/fa";
import { CgMoreVerticalO } from "react-icons/cg";
import { fetchTutors } from "../components/api/auth";

const MessagePage = ({ user }) => {
  const { id: tutorId } = useParams();
  const [conversations, setConversations] = useState([]);
  const [selectedConversation, setSelectedConversation] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isSelectingConversation, setIsSelectingConversation] = useState(false); // New state variable

  const messagesEndRef = useRef(null);

  useEffect(() => {
    const loadConversations = async () => {
      try {
        setLoading(true);
        setError(null);

        const tutorsData = await fetchTutors();

        const tutorConversations = tutorsData.map((tutor) => ({
          id: tutor.id,
          participantId: tutor.id,
          participantName: tutor.name,
          participantAvatar: tutor.imageUrl,
          lastMessage: tutor.description || "Ch∆∞a c√≥ tin nh·∫Øn n√†o",
          timestamp: "G·∫ßn ƒë√¢y",
          unreadCount: 0,
          type: "tutor",
        }));

        const systemConversations = [
          {
            id: "tips-promotions",
            participantName: "M·∫πo & Khuy·∫øn m√£i",
            title: "M·∫πo & Khuy·∫øn m√£i",
            lastMessage: "Ch∆∞a quy·∫øt ƒë·ªãnh...",
            timestamp: "H√¥m qua",
            unreadCount: 0,
            type: "system",
            icon: <FaLightbulb className="text-yellow-500" />,
          },
          {
            id: "service-notification",
            participantName: "Th√¥ng b√°o d·ªãch v·ª•",
            title: "Th√¥ng b√°o d·ªãch v·ª•",
            lastMessage: "Ch√∫ng t√¥i mu·ªën nghe √Ω ki·∫øn t·ª´...",
            timestamp: "Ng√†y 1 th√°ng 5",
            unreadCount: 0,
            type: "system",
            icon: "üì£",
          },
        ];

        const allConversations = [
          ...tutorConversations,
          ...systemConversations,
        ];
        if (!allConversations.find((c) => c.participantName === "Guy")) {
          allConversations.unshift({
            id: "guy",
            participantId: "guy",
            participantName: "Guy",
            participantAvatar: "https://randomuser.me/api/portraits/men/32.jpg",
            lastMessage: "Ch√†o b·∫°n! T√¥i nh·∫≠n th·∫•y b·∫°n g·∫ßn ƒë√¢y ƒë√£ gh√© thƒÉm h·ªì s∆° c·ªßa t√¥i, v√† t√¥i mu·ªën d√†nh ch√∫t th·ªùi gian ƒë·ªÉ li√™n h·ªá v√† gi·ªõi thi·ªáu b·∫£n th√¢n. T√™n t√¥i l√† Guy, v√† t√¥i l√† m·ªôt gi√°o vi√™n ti·∫øng Anh chuy√™n nghi·ªáp ƒë·∫øn t·ª´ V∆∞∆°ng qu·ªëc Anh. T√¥i r·∫•t mu·ªën gi√∫p b·∫°n v·ªõi ti·∫øng Anh c·ªßa b·∫°n. N·∫øu b·∫°n v·∫´n ƒëang t√¨m ki·∫øm m·ªôt gi√°o vi√™n, th√¨ t√¥i r·∫•t vui ƒë∆∞·ª£c th·ª±c hi·ªán m·ªôt bu·ªïi h·ªçc th·ª≠ v·ªõi b·∫°n. Bu·ªïi n√†y s·∫Ω cho b·∫°n c∆° h·ªôi l√†m quen v·ªõi phong c√°ch gi·∫£ng d·∫°y c·ªßa t√¥i, th·∫£o lu·∫≠n m·ª•c ti√™u c·ªßa b·∫°n, v√† ph√°c th·∫£o m·ªôt k·∫ø ho·∫°ch c√° nh√¢n h√≥a. Ho·∫∑c b·∫°n c√≥ th·ªÉ g·ª≠i tin nh·∫Øn cho t√¥i n·∫øu b·∫°n th√≠ch :) Tr√¢n tr·ªçng, Guy",
            timestamp: "H√¥m qua",
            unreadCount: 0,
            type: "system",
            icon: <FaLightbulb className="text-yellow-500" />,
          });
        }

        if (
          !allConversations.find((c) => c.participantName === "KyongSup Song")
        ) {
          allConversations.unshift({
            id: "kyongsup-song",
            participantId: "kyongsup-song",
            participantName: "KyongSup Song",
            participantAvatar: "https://randomuser.me/api/portraits/men/40.jpg",
            lastMessage: "C·∫£m ∆°n b·∫°n! T√¥i r·∫•t vui khi nghe b·∫°n n√≥i v·∫≠y, nh∆∞ng hi·ªán t·∫°i t√¥i kh√¥ng h·ª©ng th√∫ v·ªõi ti·∫øng H√†n, c√≥ l·∫Ω sau n√†y t√¥i s·∫Ω quan t√¢m, c·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá v·ªõi t√¥i. Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh!",
            timestamp: "11:14",
            unreadCount: 0,
            type: "system",
            icon: <FaLightbulb className="text-yellow-500" />,
          });
        }

        const sortedConversations = allConversations.sort((a, b) => {
          if (a.participantName === "KyongSup Song") return -1;
          if (b.participantName === "KyongSup Song") return 1;
          if (a.participantName === "Guy") return -1;
          if (b.participantName === "Guy") return 1;
          return 0;
        });

        setConversations(sortedConversations);

        if (tutorId) {
          const conversationToSelect = sortedConversations.find(
            (conv) => conv.participantId === tutorId && conv.type === "tutor"
          );
          if (conversationToSelect) {
            // Set flag before selecting conversation
            setIsSelectingConversation(true);
            setSelectedConversation(conversationToSelect);
            if (conversationToSelect.participantName === "KyongSup Song") {
              setMessages([
                {
                  id: 1,
                  sender: "tutor",
                  text: "R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n, t√¥i l√† gi√°o vi√™n ti·∫øng H√†n, KyongSup.\nB·∫°n c√≥ h·ª©ng th√∫ h·ªçc ti·∫øng H√†n kh√¥ng?\nB·∫°n ƒëang ·ªü ƒë√∫ng n∆°i r·ªìi.\nT√¥i mu·ªën t·∫∑ng b·∫°n m·ªôt bu·ªïi h·ªçc mi·ªÖn ph√≠ (50 ph√∫t) sau bu·ªïi h·ªçc th·ª≠. Ch√∫ng ta c√≥ th·ªÉ n√≥i chi ti·∫øt h∆°n trong bu·ªïi h·ªçc th·ª≠.\nT√¥i hy v·ªçng s·∫Ω g·∫∑p b·∫°n trong bu·ªïi th·ª≠.\nÏàòÏóÖÏóêÏÑú ÎµôÍ≤†ÏäµÎãàÎã§. üòä",
                  timestamp: "11:14",
                  senderAvatar: conversationToSelect.participantAvatar,
                },
              ]);
            } else if (conversationToSelect.participantName === "Guy") {
              setMessages([
                {
                  id: 1,
                  sender: "tutor",
                  text: "Ch√†o b·∫°n! T√¥i nh·∫≠n th·∫•y b·∫°n g·∫ßn ƒë√¢y ƒë√£ gh√© thƒÉm h·ªì s∆° c·ªßa t√¥i, v√† t√¥i mu·ªën d√†nh ch√∫t th·ªùi gian ƒë·ªÉ li√™n h·ªá v√† gi·ªõi thi·ªáu b·∫£n th√¢n. T√™n t√¥i l√† Guy, v√† t√¥i l√† m·ªôt gi√°o vi√™n ti·∫øng Anh chuy√™n nghi·ªáp ƒë·∫øn t·ª´ V∆∞∆°ng qu·ªëc Anh. T√¥i r·∫•t mu·ªën gi√∫p b·∫°n v·ªõi ti·∫øng Anh c·ªßa b·∫°n. N·∫øu b·∫°n v·∫´n ƒëang t√¨m ki·∫øm m·ªôt gi√°o vi√™n, th√¨ t√¥i r·∫•t vui ƒë∆∞·ª£c th·ª±c hi·ªán m·ªôt bu·ªïi h·ªçc th·ª≠ v·ªõi b·∫°n. Bu·ªïi n√†y s·∫Ω cho b·∫°n c∆° h·ªôi l√†m quen v·ªõi phong c√°ch gi·∫£ng d·∫°y c·ªßa t√¥i, th·∫£o lu·∫≠n m·ª•c ti√™u c·ªßa b·∫°n, v√† ph√°c th·∫£o m·ªôt k·∫ø ho·∫°ch c√° nh√¢n h√≥a. Ho·∫∑c b·∫°n c√≥ th·ªÉ g·ª≠i tin nh·∫Øn cho t√¥i n·∫øu b·∫°n th√≠ch :) Tr√¢n tr·ªçng, Guy",
                  timestamp: "11:14",
                  senderAvatar: conversationToSelect.participantAvatar,
                },
              ]);
            }
          }
        } else if (sortedConversations.length > 0) {
          const conversationToSelect = sortedConversations.find(
            (conv) => conv.participantId === tutorId && conv.type === "tutor"
          );
          if (conversationToSelect) {
            // Set flag before selecting conversation
            setIsSelectingConversation(true);
            setSelectedConversation(conversationToSelect);
            if (conversationToSelect.participantName === "KyongSup Song") {
              setMessages([
                {
                  id: 1,
                  sender: "tutor",
                  text: "R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n, t√¥i l√† gi√°o vi√™n ti·∫øng H√†n, KyongSup.\nB·∫°n c√≥ h·ª©ng th√∫ h·ªçc ti·∫øng H√†n kh√¥ng?\nB·∫°n ƒëang ·ªü ƒë√∫ng n∆°i r·ªìi.\nT√¥i mu·ªën t·∫∑ng b·∫°n m·ªôt bu·ªïi h·ªçc mi·ªÖn ph√≠ (50 ph√∫t) sau bu·ªïi h·ªçc th·ª≠. Ch√∫ng ta c√≥ th·ªÉ n√≥i chi ti·∫øt h∆°n trong bu·ªïi h·ªçc th·ª≠.\nT√¥i hy v·ªçng s·∫Ω g·∫∑p b·∫°n trong bu·ªïi th·ª≠.\nÏàòÏóÖÏóêÏÑú ÎµôÍ≤†ÏäµÎãàÎã§. üòä",
                  timestamp: "11:14",
                  senderAvatar: conversationToSelect.participantAvatar,
                },
              ]);
            }
          }
        }
      } catch (err) {
        console.error("Failed to load conversations:", err);
        setError(err.message || "Kh√¥ng th·ªÉ t·∫£i cu·ªôc tr√≤ chuy·ªán.");
      } finally {
        setLoading(false);
      }
    };

    loadConversations();
  }, [tutorId, user]);

  useEffect(() => {
    // Only scroll to bottom if we are NOT in the process of selecting a conversation
    if (messagesEndRef.current && !isSelectingConversation) {
      messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages, isSelectingConversation]); // Add isSelectingConversation to dependency array

  const handleSendMessage = (e) => {
    e.preventDefault();
    if (
      newMessage.trim() &&
      selectedConversation &&
      user &&
      selectedConversation.type === "tutor"
    ) {
      console.log(
        "Sending message:",
        newMessage,
        "to conversation:",
        selectedConversation.id
      );
      const sentMessage = {
        id: messages.length + 1,
        sender: "user",
        text: newMessage,
        timestamp: new Date().toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        }),
        senderAvatar:
          user.avatarUrl || "https://via.placeholder.com/30?text=B·∫°n",
      };
      // No need to set isSelectingConversation here, as sending a message
      // should trigger scrolling to the latest message.
      setMessages([...messages, sentMessage]);
      setNewMessage("");
    }
  };

  const handleSelectConversation = (conversation) => {
    console.log("Selected conversation:", conversation);
    // Set flag to prevent auto-scroll when updating messages
    setIsSelectingConversation(true);
    setSelectedConversation(conversation);
    setNewMessage("");

    let convMessages = [];
    if (conversation.type === "tutor") {
      if (conversation.participantName === "KyongSup Song") {
        convMessages = [
          {
            id: 1,
            sender: "tutor",
            text: "R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n, t√¥i l√† gi√°o vi√™n ti·∫øng H√†n, KyongSup.\nB·∫°n c√≥ h·ª©ng th√∫ h·ªçc ti·∫øng H√†n kh√¥ng?\nB·∫°n ƒëang ·ªü ƒë√∫ng n∆°i r·ªìi.\nT√¥i mu·ªën t·∫∑ng b·∫°n m·ªôt bu·ªïi h·ªçc mi·ªÖn ph√≠ (50 ph√∫t) sau bu·ªïi h·ªçc th·ª≠. Ch√∫ng ta c√≥ th·ªÉ n√≥i chi ti·∫øt h∆°n trong bu·ªïi h·ªçc th·ª≠.\nT√¥i hy v·ªçng s·∫Ω g·∫∑p b·∫°n trong bu·ªïi th·ª≠.\nÏàòÏóÖÏóêÏÑú ÎµôÍ≤†ÏäµÎãàÎã§. üòä",
            timestamp: "11:14",
            senderAvatar: conversation.participantAvatar,
          },
        ];
      } else if (conversation.participantName === "Guy") {
        convMessages = [
          {
            id: 1,
            sender: "tutor",
            text: "Ch√†o b·∫°n! T√¥i nh·∫≠n th·∫•y b·∫°n g·∫ßn ƒë√¢y ƒë√£ gh√© thƒÉm h·ªì s∆° c·ªßa t√¥i, v√† t√¥i mu·ªën d√†nh ch√∫t th·ªùi gian ƒë·ªÉ li√™n h·ªá v√† gi·ªõi thi·ªáu b·∫£n th√¢n. T√™n t√¥i l√† Guy, v√† t√¥i l√† m·ªôt gi√°o vi√™n ti·∫øng Anh chuy√™n nghi·ªáp ƒë·∫øn t·ª´ V∆∞∆°ng qu·ªëc Anh. T√¥i r·∫•t mu·ªën gi√∫p b·∫°n v·ªõi ti·∫øng Anh c·ªßa b·∫°n. N·∫øu b·∫°n v·∫´n ƒëang t√¨m ki·∫øm m·ªôt gi√°o vi√™n, th√¨ t√¥i r·∫•t vui ƒë∆∞·ª£c th·ª±c hi·ªán m·ªôt bu·ªïi h·ªçc th·ª≠ v·ªõi b·∫°n. Bu·ªïi n√†y s·∫Ω cho b·∫°n c∆° h·ªôi l√†m quen v·ªõi phong c√°ch gi·∫£ng d·∫°y c·ªßa t√¥i, th·∫£o lu·∫≠n m·ª•c ti√™u c·ªßa b·∫°n, v√† ph√°c th·∫£o m·ªôt k·∫ø ho·∫°ch c√° nh√¢n h√≥a. Ho·∫∑c b·∫°n c√≥ th·ªÉ g·ª≠i tin nh·∫Øn cho t√¥i n·∫øu b·∫°n th√≠ch :) Tr√¢n tr·ªçng, Guy",
            timestamp: "H√¥m qua",
            senderAvatar: conversation.participantAvatar,
          },
        ];
      }
    } else {
      convMessages = [
        {
          id: 1,
          sender: "system",
          text: `ƒê√¢y l√† k√™nh th√¥ng b√°o h·ªá th·ªëng. Kh√¥ng c√≥ tin nh·∫Øn t∆∞∆°ng t√°c ·ªü ƒë√¢y.`,
          timestamp: "V·ª´a xong",
          senderAvatar: null,
        },
        {
          id: 2,
          sender: "system",
          text: conversation.lastMessage,
          timestamp: conversation.timestamp,
          senderAvatar: null,
        },
      ];
    }

    setMessages(convMessages);
    // Reset flag after messages are set, allowing subsequent message additions to scroll
    setIsSelectingConversation(false);
  };

  if (loading)
    return (
      <div className="flex justify-center items-center h-screen">
        ƒêang t·∫£i cu·ªôc tr√≤ chuy·ªán...
      </div>
    );
  if (error)
    return (
      <div className="flex justify-center items-center h-screen text-red-500">
        L·ªói: {error}
      </div>
    );
  if (!user)
    return (
      <div className="flex justify-center items-center h-screen text-red-500">
        Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem tin nh·∫Øn c·ªßa b·∫°n.
      </div>
    );

  return (
    <div className="container mx-auto flex h-[calc(100vh-8rem)] border my-4 border-gray-300 rounded-lg overflow-hidden shadow-lg max-w-6xl">
      <div className="w-80 bg-white border-r border-gray-200 flex flex-col flex-shrink-0 h-full">
        <div className="p-4 border-b border-gray-200">
          <div className="relative">
            <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 text-sm" />
            <input
              type="text"
              placeholder="T√¨m ki·∫øm theo t√™n"
              className="w-full pl-10 pr-4 py-2 rounded-full text-black bg-gray-100 border border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-sm"
            />
          </div>
        </div>

        {/* Optional: Add max-height: 480px (8 * 60px) if you want to enforce scrolling after 8 rows */}
        <div className="flex-1 overflow-y-auto custom-scrollbar">
          {conversations.length > 0 ? (
            conversations.map((conv) => (
              <div
                key={conv.id}
                className={`flex items-center p-3 border-b border-gray-100 cursor-pointer hover:bg-gray-50 transition ${
                  selectedConversation?.id === conv.id ? "bg-gray-100" : ""
                }`}
                onClick={() => handleSelectConversation(conv)}
              >
                {conv.type === "tutor" ? (
                  <img
                    src={
                      conv.participantAvatar ||
                      "https://via.placeholder.com/40?text=·∫¢nh ƒë·∫°i di·ªán"
                    }
                    alt={conv.participantName}
                    className="w-10 h-10 rounded-full object-cover mr-3"
                  />
                ) : (
                  <div className="flex items-center justify-center w-10 h-10 rounded-full bg-blue-100 text-blue-600 mr-3 text-lg">
                    {conv.icon || "üí¨"}
                  </div>
                )}

                <div className="flex-1 min-w-0">
                  <div className="flex justify-between items-center">
                    {conv.type === "tutor" ? (
                      <div className="font-semibold text-gray-800 text-sm truncate">
                        {conv.participantName}
                      </div>
                    ) : (
                      <div className="font-semibold text-gray-800 text-sm truncate">
                        {conv.title}
                      </div>
                    )}

                    <div className="text-xs text-gray-500 flex-shrink-0 ml-2">
                      {conv.timestamp}
                    </div>
                  </div>
                  <div className="text-sm text-gray-600 truncate">
                    {conv.lastMessage || "Ch∆∞a c√≥ tin nh·∫Øn n√†o"}
                  </div>
                </div>
                {conv.unreadCount > 0 && (
                  <span className="ml-2 bg-red-500 text-white text-xs font-bold rounded-full h-5 w-5 flex items-center justify-center flex-shrink-0">
                    {conv.unreadCount}
                  </span>
                )}
              </div>
            ))
          ) : (
            <p className="text-center text-gray-500 mt-4 text-sm">
              Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán n√†o.
            </p>
          )}
        </div>
      </div>

      <div className="flex-1 flex flex-col bg-gray-50 h-full">
        <div className="flex items-center justify-between p-4 bg-white border-b border-gray-200 shadow-sm">
          <div className="text-lg font-semibold text-gray-800">
            {selectedConversation?.participantName ||
              selectedConversation?.title ||
              "Ch·ªçn m·ªôt cu·ªôc tr√≤ chuy·ªán"}
          </div>
          <div className="flex items-center">
            {selectedConversation?.type === "tutor" && (
              <div
                className="text-gray-600 cursor-pointer hover:text-blue-600 transition"
                title="Xem l·ªãch"
              >
                <FaCalendarAlt />
              </div>
            )}
          </div>
        </div>

        <div className="flex-1 overflow-y-auto p-6 space-y-4 custom-scrollbar">
          {!selectedConversation && (
            <div className="flex justify-center items-center h-full text-gray-500 text-center">
              <p>Vui l√≤ng ch·ªçn m·ªôt cu·ªôc tr√≤ chuy·ªán ƒë·ªÉ xem tin nh·∫Øn.</p>
            </div>
          )}

          {selectedConversation &&
            messages.length === 0 &&
            !loading &&
            selectedConversation.type === "tutor" && (
              <div className="flex justify-center items-center h-full text-gray-500 text-center">
                <p>Ch∆∞a c√≥ tin nh·∫Øn n√†o. B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán!</p>
              </div>
            )}

          {messages.map((message) =>
            message.sender === "system" ? (
              <div
                key={message.id}
                className="flex items-center justify-center"
              >
                <div className="p-3 rounded-lg bg-gray-200 text-gray-800 max-w-md text-sm break-words text-center">
                  <p>{message.text}</p>
                  <div className="text-xs mt-1 text-gray-500">
                    {message.timestamp}
                  </div>
                </div>
              </div>
            ) : (
              <div
                key={message.id}
                className={`flex items-start gap-3 ${
                  message.sender === "user" ? "flex-row-reverse" : ""
                }`}
              >
                <img
                  src={
                    message.senderAvatar ||
                    (message.sender === "user"
                      ? user?.avatarUrl ||
                        "https://via.placeholder.com/30?text=B·∫°n"
                      : selectedConversation?.participantAvatar ||
                        "https://via.placeholder.com/30?text=?")
                  }
                  alt={
                    message.sender === "user"
                      ? "B·∫°n"
                      : selectedConversation?.participantName || "Ng∆∞·ªùi tham gia"
                  }
                  className="w-8 h-8 rounded-full object-cover flex-shrink-0"
                />
                <div
                  className={`p-3 rounded-lg ${
                    message.sender === "user"
                      ? "bg-blue-500 text-white rounded-br-none"
                      : "bg-gray-200 text-gray-800 rounded-bl-none"
                  } max-w-[70%] break-words shadow`}
                >
                  {message.sender !== "user" &&
                    selectedConversation?.type === "tutor" && (
                      <div className="font-semibold text-xs mb-1">
                        {selectedConversation.participantName}
                      </div>
                    )}
                  {message.text.split("\n").map((line, index) => (
                    <p key={index}>{line}</p>
                  ))}
                  <div
                    className={`text-xs mt-1 ${
                      message.sender === "user"
                        ? "text-blue-200 text-right"
                        : "text-gray-500 text-left"
                    }`}
                  >
                    {message.timestamp}
                  </div>
                </div>
              </div>
            )
          )}

          <div ref={messagesEndRef} />

          {selectedConversation &&
            messages.length > 0 &&
            selectedConversation.type === "tutor" && (
              <div className="text-center text-sm text-gray-500 mt-4">
                L·ªãch s·ª≠ tin nh·∫Øn ƒë∆∞·ª£c gi·ªõi h·∫°n trong 6 th√°ng g·∫ßn nh·∫•t.
              </div>
            )}
        </div>
      </div>
    </div>
  );
};

export default MessagePage;